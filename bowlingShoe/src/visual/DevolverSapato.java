/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import bowlingshoe.Cliente;
import bowlingshoe.Movimentacao;
import bowlingshoe.MovimentacaoDAO;
import bowlingshoe.Sapato;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Herson
 */
public class DevolverSapato extends javax.swing.JDialog {

    public void atualizaTabela() {
        MovimentacaoDAO dao = new MovimentacaoDAO();
        String cpf = cpfCliente.getText();
        Cliente cliente = new Cliente();
        cliente.setCpf(cpf);
        listObjetos.clear();
        listObjetos.addAll(dao.getListaR(cliente));
        int linha = listObjetos.size() - 1;
        if (linha >= 0) {
            tbItens.setRowSelectionInterval(linha, linha);
            tbItens.scrollRectToVisible(tbItens.getCellRect(linha, linha, true));
        }
    }

    public DevolverSapato(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        listObjetos = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList<Movimentacao>());
        guiaItens = new javax.swing.JTabbedPane();
        painelItens = new javax.swing.JPanel();
        painelComItens = new javax.swing.JScrollPane();
        tbItens = new javax.swing.JTable();
        btRetirar = new javax.swing.JButton();
        infos = new javax.swing.JLabel();
        dadoCliente = new javax.swing.JLabel();
        cpfCliente = new javax.swing.JFormattedTextField();
        dMov = new javax.swing.JLabel();
        idFuncionario = new javax.swing.JLabel();
        idFun = new javax.swing.JTextField();
        btCancelar = new javax.swing.JButton();
        dataMov = new javax.swing.JFormattedTextField();
        btValidar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        painelItens.setLayout(new java.awt.BorderLayout());

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, listObjetos, tbItens);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idFun}"));
        columnBinding.setColumnName("Id Fun");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cliente}"));
        columnBinding.setColumnName("Cliente");
        columnBinding.setColumnClass(bowlingshoe.Cliente.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${cpfCliente}"));
        columnBinding.setColumnName("Cpf Cliente");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idSap}"));
        columnBinding.setColumnName("Id Sap");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sapato}"));
        columnBinding.setColumnName("Sapato");
        columnBinding.setColumnClass(bowlingshoe.Sapato.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${data}"));
        columnBinding.setColumnName("Data");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${status}"));
        columnBinding.setColumnName("Status");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        painelComItens.setViewportView(tbItens);

        painelItens.add(painelComItens, java.awt.BorderLayout.PAGE_START);

        guiaItens.addTab("Itens", painelItens);

        btRetirar.setText("DEVOLVER");
        btRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetirarActionPerformed(evt);
            }
        });

        infos.setText("*Informações obrigatórias");

        dadoCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dadoCliente.setText("CPF*: ");

        try {
            cpfCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        cpfCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpfClienteActionPerformed(evt);
            }
        });

        dMov.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dMov.setText("DATA*:");

        idFuncionario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        idFuncionario.setText("ID Funcionário*: ");

        idFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFunActionPerformed(evt);
            }
        });

        btCancelar.setText("CANCELAR");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        try {
            dataMov.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btValidar.setText("VALIDAR DADOS");
        btValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btValidarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guiaItens)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(66, 66, 66)
                        .addComponent(btRetirar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(infos))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cpfCliente))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idFun, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(dMov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataMov, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(btValidar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(dataMov))
                            .addComponent(dadoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(cpfCliente))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(dMov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(idFun))
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btValidar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(infos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiaItens, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRetirar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetirarActionPerformed


    }//GEN-LAST:event_btRetirarActionPerformed

    private void cpfClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpfClienteActionPerformed

    }//GEN-LAST:event_cpfClienteActionPerformed

    private void idFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFunActionPerformed

    }//GEN-LAST:event_idFunActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        Object[] opcao = {"SIM", "NÃO"};

        int n = JOptionPane.showOptionDialog(this, "Tem certeza que "
                + "deseja cancelar a operação? ", "Selecione uma opção!", JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opcao, opcao[1]);
        if (n == 0) {
            DevolverSapato.this.setVisible(false);
        }
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btValidarActionPerformed
        String cpf = cpfCliente.getText();
        String data = dataMov.getText();
        String idfuncionario = idFun.getText();

        if (idfuncionario.equals("")) {
            idfuncionario = "0";
        }
        int IDFuncionario = Integer.parseInt(idfuncionario);

        if (cpf.trim().equals("") || data.trim().equals("") || IDFuncionario == 0) {
            JOptionPane.showMessageDialog(null, "Dados incorretos ou campos inválidos.\n Digite novamente por favor!");
        } else {
            int digitosCPF = cpf.length();
            int someCPF, divisaoCPF, segundaSomaCPF, segundaDivisaoCPF;
            int a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
            int b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11;
            int c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11;

            if (digitosCPF == 14) {
                a1 = Character.getNumericValue(cpf.charAt(0));
                a2 = Character.getNumericValue(cpf.charAt(1));
                a3 = Character.getNumericValue(cpf.charAt(2));
                a4 = Character.getNumericValue(cpf.charAt(4));
                a5 = Character.getNumericValue(cpf.charAt(5));
                a6 = Character.getNumericValue(cpf.charAt(6));
                a7 = Character.getNumericValue(cpf.charAt(8));
                a8 = Character.getNumericValue(cpf.charAt(9));
                a9 = Character.getNumericValue(cpf.charAt(10));
                a10 = Character.getNumericValue(cpf.charAt(12));
                a11 = Character.getNumericValue(cpf.charAt(13));

                b1 = a1 * 1;
                b2 = a2 * 2;
                b3 = a3 * 3;
                b4 = a4 * 4;
                b5 = a5 * 5;
                b6 = a6 * 6;
                b7 = a7 * 7;
                b8 = a8 * 8;
                b9 = a9 * 9;

                someCPF = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9;
                divisaoCPF = someCPF % 11;
                if (divisaoCPF == 10) {
                    divisaoCPF = 0;
                }

                c1 = a1 * 9;
                c2 = a2 * 8;
                c3 = a3 * 7;
                c4 = a4 * 6;
                c5 = a5 * 5;
                c6 = a6 * 4;
                c7 = a7 * 3;
                c8 = a8 * 2;
                c9 = a9 * 1;

                segundaSomaCPF = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9;
                segundaDivisaoCPF = segundaSomaCPF % 11;
                if (segundaDivisaoCPF == 10) {
                    segundaDivisaoCPF = 0;
                }

                if (divisaoCPF == a10 && segundaDivisaoCPF == a11) {
                    atualizaTabela();

                } else {
                    JOptionPane.showMessageDialog(null, "Dados incorretos ou campos inválidos (CPF*).\n Digite novamente por favor!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Dados incorretos ou campos inválidos (CPF*).\n Digite novamente por favor!");
            }
        }
    }//GEN-LAST:event_btValidarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btRetirar;
    private javax.swing.JButton btValidar;
    private javax.swing.JFormattedTextField cpfCliente;
    private javax.swing.JLabel dMov;
    private javax.swing.JLabel dadoCliente;
    private javax.swing.JFormattedTextField dataMov;
    private javax.swing.JTabbedPane guiaItens;
    private javax.swing.JTextField idFun;
    private javax.swing.JLabel idFuncionario;
    private javax.swing.JLabel infos;
    private java.util.List<Movimentacao> listObjetos;
    private javax.swing.JScrollPane painelComItens;
    private javax.swing.JPanel painelItens;
    private javax.swing.JTable tbItens;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
